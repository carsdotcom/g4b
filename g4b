#!/usr/bin/env bash
while (( "$#" )); do shift; done

G4B_UNDERLINE=$(tput sgr 0 1)
G4B_RED=$(tput setaf 1)
G4B_GREEN=$(tput setaf 2)
G4B_YELLOW=$(tput setaf 3)
G4B_BLUE=$(tput setaf 4)
G4B_RESET=$(tput sgr0)
G4B_CHECKMARK="\xe2\x9c\x93"
G4B_XMARK="\xe2\x9c\x95"
G4B_TOTAL_COUNT=0
G4B_PASS_COUNT=0
G4B_FAIL_COUNT=0
G4B_PATH_BKUP="$PATH"
G4B_RESERVED_WORDS='g4b_|G4B_|section\s?\(|feature\s?\(|ffeature\s?\(|xfeature\s?\(|scenario\s?\(|given\s?\(|teardown\s?\(|when\s?\(|thenn\s?\(|load_src\s?\(|load_specs\s?\('

g4b_specific_call_count=0
g4b_expected_call_count=1
g4b_actual_call_count=0

clear
printf "\n%b%bRunning specs...%b\n" $G4B_UNDERLINE $G4B_BLUE $G4B_RESET

g4b_error() {
    local callstack=$(caller)
    local callstack_lineno=$(echo "$callstack" | awk '{print $1}')
    local callstack_file=$(echo "$callstack" | awk '{print $2}')
    local message="$1"
    local code="${2:-1}"

    printf "\n%bError on line %d of %s\n" $G4B_RED $callstack_lineno $callstack_file
    if [[ -n "$message" ]] ; then
        printf "%bMessage: %s; exiting with status %d%b\n\n" $G4B_RED "$message" $code $G4B_RESET
    else
        printf "%bExiting with status %d%b\n\n" $G4B_RED $code $G4B_RESET
    fi

    exit $code
}

g4b_finish() {
    local code=$?
    local msg="\n"

    [ $code -ne 0 ] && return $code

    if [ $G4B_PASS_COUNT -gt 0 ]; then
        msg+="${G4B_GREEN}${G4B_CHECKMARK} ${G4B_PASS_COUNT} passed"
    fi

    if [ $G4B_PASS_COUNT -gt 0 ] && [ $G4B_FAIL_COUNT -gt 0 ]; then
        msg+="${G4B_BLUE} and "
    fi

    if [ $G4B_FAIL_COUNT -gt 0 ]; then
        msg+="${G4B_RED}${G4B_XMARK} ${G4B_FAIL_COUNT} failed"
    fi

    msg+="${G4B_BLUE} of ${G4B_BLUE}${G4B_TOTAL_COUNT} total specs${G4B_RESET}\n\n"

    printf "\n%b" "$msg"

    [ $G4B_FAIL_COUNT -gt 0 ] && exit 1 || exit 0
}

g4b_set_traps() {
    local trap_func="${1:-g4b_finish}"
    local trap_err_func="${1:-g4b_error}"

    trap - 0 INT TERM
    trap $trap_func 0 INT TERM
    trap - ERR
    trap $trap_err_func ERR
}
g4b_set_traps

load_src() {
    local src="$(cat $1)"
    if [ -z "$(echo "$src" | grep -E $G4B_RESERVED_WORDS)" ]; then
        source $1
    else
        echo "Check source for reserved words"
        exit 1
    fi
}

load_specs() {
    test -n "$(cat $1 | grep -E '^ffeature')" && g4b_focus=1
    source $1
}

g4b_feature_reset() {
    unset g4b_xfeature
}

g4b_scenario_reset() {
    unset -f setup
    unset -f teardown
}

g4b_expect_reset() {
    unset g4b_given_text
    unset g4b_when
    unset g4b_then
    unset g4b_pass
    g4b_specific_call_count=0
    g4b_expected_call_count=1
    g4b_actual_call_count=0
    g4b_actual_vs_expected_msg=""
    PATH="$G4B_PATH_BKUP"
}

section() {
    local text="$(echo $1 | tr '[:lower:]' '[:upper:]')"
    echo
    g4b_print_rule
    printf "\n  %s" "$text"
    g4b_print_rule
    echo
}

feature(){
    if [ -z "$g4b_focus" ]; then
        ffeature "$1"
    else
        xfeature "$1"
    fi
}

ffeature(){
    g4b_feature_reset
    g4b_feature_text="$1 "
}

xfeature(){
    g4b_feature_reset
    g4b_feature_text="Skipping ... $1 "
    g4b_xfeature=true
}

scenario(){
    local eol="\n"
    g4b_scenario_reset
    if [ -n "$g4b_xfeature" ]; then
        eol=""
    fi
    printf "\n  %b%s%s%b%b" $G4B_YELLOW "$g4b_feature_text" "$1" $G4B_RESET $eol
}

given() {
    IFS=$' ' g4b_given_text="$*"
}

g4b_setup() {
    declare -f setup > /dev/null && setup
}

g4b_teardown() {
    declare -f teardown > /dev/null && teardown
    g4b_expect_reset
}

g4b_print_rule() {
    local cols

    cols=$(tput cols)
    (( cols = cols - 4 ))

    printf "\n  "
    eval printf %.0s- '{1..'"$cols"\}
}

g4b_print_pass(){
    local msg="$1"

    while (( "$#" )); do shift; done

    printf "%b%b  " $G4B_GREEN $G4B_CHECKMARK
    [ -n  "$g4b_given_text" ] && printf "given %s\n       " "$g4b_given_text"

    if [ -n "$G4B_DEBUG" ]; then
        msg+="\n$(echo "$g4b_actual_vs_expected_msg" | while read line; do echo "       $line"; done)\n"
    fi

    printf "%b%b\n" "$msg" $G4B_RESET

    (( G4B_PASS_COUNT++ ))
}

g4b_print_fail(){
    local frame=0
    local msg="$1"

    while (( "$#" )); do shift; done

    printf "%b%b  " $G4B_RED $G4B_XMARK
    [ -n  "$g4b_given_text" ] && printf "given %s\n       " "$g4b_given_text"

    msg+="\n$(echo "$g4b_actual_vs_expected_msg" | while read line; do echo "       $line"; done)\n"

    msg+="$G4B_RESET\n       Call stack:"
    while $(caller $frame > /dev/null 2>&1); do
        msg+="\n         $(caller $frame)"
        ((frame++));
    done
    printf "%b%b\n\n" "$msg" $G4B_RESET

    (( G4B_FAIL_COUNT++ ))
}

g4b_print_result(){
    local msg="$1"

    printf "    "

    if [ "${g4b_pass:-0}" -eq 0 ]; then
        g4b_print_fail "$msg"
    else
        g4b_print_pass "$msg"
    fi

    (( G4B_TOTAL_COUNT++ ))
}

when() {
    local cmd

    if [ "$2 $3" == "is called" ]; then
        cmd=( $1 )
        if [ $# -gt 4 ]; then
            IFS=% cmd+=( ${@:5} )
        fi
        IFS=% g4b_when=( "${cmd[@]}" )
    fi
}

thenn() {
    local cmd

    if [ -z "$g4b_xfeature" ]; then
        g4b_setup

        if [ "$1 $2" == "exit with" ]; then
            g4b_expect_to_exit_with $3

        elif [ "$2 $3 $4" == "should be called" ]; then
            cmd=( $1 )
            if [ $# -gt 5 ]; then
                if [ "$5" == "with" ]; then

                    # capture expected arguments
                    g4b_expected_args_tmp=$(mktemp 2>/dev/null || mktemp -t tmp)
                    IFS_bkup=$IFS
                    IFS=$'\n'
                    for arg in "${@:6}"; do
                        echo $arg >> "$g4b_expected_args_tmp"
                    done
                    IFS=$IFS_bkup

                    IFS=% cmd+=( ${@:6} )
                elif [[ $5 =~ ^[0-9]+$ ]] && [[ $6 =~ ^times?$ ]]; then
                    g4b_specific_call_count=1
                    g4b_expected_call_count=$5

                    if [ "$7" == "with" ]; then
                        # capture expected arguments
                        g4b_expected_args_tmp=$(mktemp 2>/dev/null || mktemp -t tmp)
                        IFS_bkup=$IFS
                        IFS=$'\n'
                        for arg in "${@:8}"; do
                            echo $arg >> "$g4b_expected_args_tmp"
                        done
                        IFS=$IFS_bkup
                        IFS=% cmd+=( ${@:8} )
                    fi
                fi
            fi
            g4b_then=( "${cmd[@]}" )
            g4b_expect_to_have_been_called

        elif [ "$1 $2 $3" == "output should match" ]; then
            if [ $# -gt 3 ]; then
                g4b_expect_output_to_match 0 "${@:4}"
            else
                g4b_expect_output_to_match 0
            fi

        elif [ "$1 $2 $3 $4" == "output should not match" ]; then
            if [ $# -gt 4 ]; then
                g4b_expect_output_to_match 1 "${@:5}"
            else
                g4b_expect_output_to_match 1
            fi

        fi

        g4b_teardown
    fi
}

g4b_expect_to_exit_with() {
    local code
    local cmd
    local msg
    local trapped
    local actual

    code="$1"
    trapped=0

    while (( "$#" )); do shift; done

    IFS=% cmd=( "${g4b_when[@]}" )

    if [ ${#cmd[@]} -gt 1 ]; then
        msg="when \`${cmd[0]}\` is called with $(printf "\`%s\` " "${cmd[@]:1}")\n       then it should exit with \`$code\`"
    else
        msg="when \`${cmd[0]}\` is called\n       then it should exit with \`$code\`"
    fi

    exit() {
        actual=$1
    }

    "${cmd[@]}" > /dev/null 2>&1
    actual=${actual:-$?}

    unset -f exit

    if [ -n "$G4B_DEBUG" ]; then
        echo "expected exit code: $code"
        echo "actual exit code: $actual"
    fi

    if [ "$actual" -eq "$code" ]; then
       g4b_pass=1
    else
       g4b_pass=0
    fi

    g4b_print_result "$msg"
}

g4b_expect_output_to_match() {
    local invert
    local invert_text
    local expected_output
    local cmd
    local msg
    local cmd_output

    invert="$1"
    expected_output="$2"

    while (( "$#" )); do shift; done

    IFS=% cmd=( "${g4b_when[@]}" )

    if [ ${#cmd[@]} -gt 1 ]; then
        msg="when \`${cmd[0]}\` is called with$(printf " \`%s\`" "${cmd[@]:1}")\n       then output should match \`$expected_output\`"
    else
        msg="when \`${cmd[0]}\` is called\n       then output should match \`$expected_output\`"
    fi

    cmd_output=$(${cmd[@]})

    if $(echo "$cmd_output" | grep -q -e "$expected_output"); then
        g4b_pass=1
    else
        g4b_pass=0
    fi

    if [ "$invert" -eq 1 ]; then
        if [ "$g4b_pass" -eq 0 ]; then
            g4b_pass=1
        else
            g4b_pass=0
        fi
        invert_text=" not"
    fi

    if [ "$g4b_pass" -eq 0 ]; then
        if [ $(echo "$cmd_output" | grep -c '$') -gt 1 ]; then
            msg+="\n       expected output to${invert_text} match \`$expected_output\`. actual was:\n\n"
            msg+=$(echo "$cmd_output" | while read line; do echo "         $line"; done)
            msg+="\n"
        else
            msg+="\n       expected output${invert_text} to match \`$expected_output\`. actual was \`$cmd_output\`"
        fi
    fi

    g4b_print_result "$msg"
}

g4b_create_spy() {
    local name=$1
    local output=$2
    local code=$3

    while (( "$#" )); do shift; done

    local tmp_dir="$(mktemp -d 2>/dev/null || mktemp -t tmp -d)"
    local tmp_args=$(mktemp 2>/dev/null || mktemp -t tmp)
    local tmp_calls=$(mktemp 2>/dev/null || mktemp -t tmp)

    echo "call_count=\$(cat \"$tmp_calls\" 2>/dev/null || echo 0)
        (( call_count++ ))
        echo \$call_count >| \"$tmp_calls\"
        IFS_bkup=\$IFS
        IFS=$'\n'
        for arg in \"\$@\"; do
            echo \$arg >> \"${tmp_args}-\${call_count}\"
        done
        IFS=\$IFS_bkup
        cat <<'EOD'
$output
EOD
        exit \"${code}\"" > "${tmp_dir}/${name}"

    chmod +x "${tmp_dir}/${name}"

    echo $tmp_dir
    echo $tmp_args
    echo $tmp_calls
}

g4b_expect_to_have_been_called() {
    local subject
    local subject_cmd_name
    local expected_args
    local expected_args_text
    local condition
    local condition_cmd_name
    local subject_output
    local subject_code
    local msg
    local condition_script_name
    local condition_script
    local tmp_files
    local tmp_dir
    local tmp_args
    local tmp_calls

    IFS=% subject=( "${g4b_then[@]}" )
    subject_cmd_name="${subject[0]}"

    IFS=% condition=( "${g4b_when[@]}" )
    condition_cmd_name="${condition[0]}"

    expected_args="${g4b_then[*]:1}"

    if [ -n "${subject[*]:1}" ]; then
        expected_args_text="$(cat "$g4b_expected_args_tmp" | while read line; do printf "\`%b\` " "$line"; done)"
    fi

    msg="when \`${condition_cmd_name}\` is called"

    if [ "${#condition[@]}" -gt 1 ]; then
        msg+=" with$(printf " \`%s\`" "${condition[@]:1}")"
    fi

    msg+="\n       then \`${subject_cmd_name}\` should be called"

    if [ "${#subject[@]}" -gt 1 ]; then
        msg+=" with $expected_args_text"
    fi

    if [ "$g4b_specific_call_count" = 1 ]; then
        if [ "${g4b_expected_call_count}" -eq 1 ]; then
            msg+=" ${g4b_expected_call_count} time"
        else
            msg+=" ${g4b_expected_call_count} times"
        fi
    fi

    # capture output and exit status
    subject_output=$("${subject[@]}" 2>&1)
    subject_code=$?

    # backup original subject, if function
    if [ "$(type -t "${subject_cmd_name}")" == "function" ]; then
        eval "$(echo "g4b_bkup_${subject_cmd_name}()" && declare -f "${subject_cmd_name}" | tail -n +2)"
        unset -f "${subject_cmd_name}"
    fi

    # replace with spy
    IFS=$'\n' tmp_files=( $(g4b_create_spy "$subject_cmd_name" "$subject_output" "$subject_code") )
    local tmp_dir="${tmp_files[0]}"
    local tmp_args="${tmp_files[1]}"
    local tmp_calls="${tmp_files[2]}"
    PATH="${tmp_dir}:${PATH}"

    # source condition as script
    condition_script_name="$(mktemp 2>/dev/null || mktemp -t tmp)"
    printf "" >| "$condition_script_name"
    #echo "$(declare -f ${condition_cmd_name} | sed $'3i\\\n\ \ \ \ alias\ exit=\'return\'\n')" >> "$condition_script_name"
    #echo "$(declare -f ${condition_cmd_name} | sed $'3i\\\n\ \ \ \ exit()\ {}\n')" >> "$condition_script_name"
    echo "$(declare -f ${condition_cmd_name})" >> "$condition_script_name"
    echo "${condition_cmd_name} \"\$@\"" >> "$condition_script_name"

    IFS=% condition_script=( "source" "$condition_script_name" "${condition[@]:1}" )

    alias exit='return';
    if [ -n "$G4B_DEBUG" ]; then
        echo "subject script: ${tmp_dir}/${subject_cmd_name}"
        echo "condition script: ${condition_script[@]}"
        "${condition_script[@]}"
    else
        "${condition_script[@]}" > /dev/null 2>&1
    fi
    unalias exit

    # restore original subject, if function
    if [ "$(type -t "g4b_bkup_${subject_cmd_name}")" == "function" ]; then
        eval "$(echo "${subject_cmd_name}()" && declare -f "g4b_bkup_${subject_cmd_name}" | tail -n +2)"
        unset -f "g4b_bkup_${subject_cmd_name}"
    fi

    g4b_actual_call_count="$(cat "$tmp_calls")"
    g4b_actual_call_count="${g4b_actual_call_count:-0}"

    # check arguments
    if [ -n "${subject[*]:1}" ]; then
        for ((i=1;i<=${g4b_actual_call_count};i++)); do
            g4b_actual_vs_expected_msg="${g4b_actual_vs_expected_msg}$(printf "\n%bActual arguments:%b %b%b%b\n" $G4B_RED $G4B_RESET $G4B_YELLOW "$(cat "${tmp_args}-$i" | while read line; do printf "%s " "$line"; done)" $G4B_RESET)"
            g4b_actual_vs_expected_msg="${g4b_actual_vs_expected_msg}$(printf "\n%bExpected arguments:%b %b%b%b\n" $G4B_RED $G4B_RESET $G4B_YELLOW "$(cat "$g4b_expected_args_tmp" | while read line; do printf "%s " "$line"; done)" $G4B_RESET)"
            if [ -z "$(diff "$g4b_expected_args_tmp" "${tmp_args}-$i")" ]; then
                g4b_actual_vs_expected_msg="${g4b_actual_vs_expected_msg}$(printf "\n%bActual arguments:%b %b%b%b\n" $G4B_GREEN $G4B_RESET $G4B_YELLOW "$(cat "${tmp_args}-$i" | while read line; do printf "%s " "$line"; done)" $G4B_RESET)"
                g4b_actual_vs_expected_msg="${g4b_actual_vs_expected_msg}$(printf "\n%bExpected arguments:%b %b%b%b\n" $G4B_GREEN $G4B_RESET $G4B_YELLOW "$(cat "$g4b_expected_args_tmp" | while read line; do printf "%s " "$line"; done)" $G4B_RESET)"
                g4b_pass=1
            else
                g4b_actual_vs_expected_msg="${g4b_actual_vs_expected_msg}$(printf "\n%bActual arguments:%b %b%b%b\n" $G4B_RED $G4B_RESET $G4B_YELLOW "$(cat "${tmp_args}-$i" | while read line; do printf "%s " "$line"; done)" $G4B_RESET)"
                g4b_actual_vs_expected_msg="${g4b_actual_vs_expected_msg}$(printf "\n%bExpected arguments:%b %b%b%b\n" $G4B_RED $G4B_RESET $G4B_YELLOW "$(cat "$g4b_expected_args_tmp" | while read line; do printf "%s " "$line"; done)" $G4B_RESET)"
                g4b_pass="${g4b_pass:-0}"
            fi
        done
    fi

    # check call count
    if [ "$g4b_expected_call_count" -ne 0 ] && [ "$g4b_actual_call_count" -eq 0 ]; then
        g4b_pass=0
    elif [ "$g4b_expected_call_count" -eq "$g4b_actual_call_count" ] || [ "$g4b_specific_call_count" = 0 ]; then
        if [ "${g4b_pass:-1}" -eq 1 ]; then
            g4b_pass=1
        else
            g4b_pass=0
        fi
    else
        msg+="\n       expected ${g4b_expected_call_count} calls but saw ${g4b_actual_call_count}"
        g4b_pass=0
    fi

    # print result
    g4b_print_result "$msg"

}

